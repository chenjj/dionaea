Description: Add untrack file
 dionaea-nisl (0.1.0.3-0.3) precise; urgency=low
 .
   * Remove log and move cfg to position
Author: Xiaoyu Liu (Vury Leo) <i@vuryleo.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- /dev/null
+++ b/hpfeeds/Makefile
@@ -0,0 +1,796 @@
+# Makefile.in generated by automake 1.11.1 from Makefile.am.
+# src/Makefile.  Generated from Makefile.in by configure.
+
+# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
+# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
+# Inc.
+# This Makefile.in is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
+# PARTICULAR PURPOSE.
+
+
+
+
+pkgdatadir = $(datadir)/dionaea
+pkgincludedir = $(includedir)/dionaea
+pkglibdir = $(libdir)/dionaea
+pkglibexecdir = $(libexecdir)/dionaea
+am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
+install_sh_DATA = $(install_sh) -c -m 644
+install_sh_PROGRAM = $(install_sh) -c
+install_sh_SCRIPT = $(install_sh) -c
+INSTALL_HEADER = $(INSTALL_DATA)
+transform = $(program_transform_name)
+NORMAL_INSTALL = :
+PRE_INSTALL = :
+POST_INSTALL = :
+NORMAL_UNINSTALL = :
+PRE_UNINSTALL = :
+POST_UNINSTALL = :
+build_triplet = i686-pc-linux-gnu
+host_triplet = i686-pc-linux-gnu
+bin_PROGRAMS = dionaea$(EXEEXT)
+subdir = src
+DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
+ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
+am__aclocal_m4_deps = $(top_srcdir)/m4/az_python.m4 \
+	$(top_srcdir)/m4/az_bind_ipv4_mapped_localhost.m4 \
+	$(top_srcdir)/configure.ac
+am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
+	$(ACLOCAL_M4)
+mkinstalldirs = $(install_sh) -d
+CONFIG_HEADER = $(top_builddir)/config.h
+CONFIG_CLEAN_FILES =
+CONFIG_CLEAN_VPATH_FILES =
+am__installdirs = "$(DESTDIR)$(bindir)"
+PROGRAMS = $(bin_PROGRAMS)
+am_dionaea_OBJECTS = dionaea-dionaea.$(OBJEXT) dionaea-dns.$(OBJEXT) \
+	dionaea-refcount.$(OBJEXT) dionaea-node_info.$(OBJEXT) \
+	dionaea-util.$(OBJEXT) dionaea-connection.$(OBJEXT) \
+	dionaea-modules.$(OBJEXT) dionaea-pchild.$(OBJEXT) \
+	dionaea-log.$(OBJEXT) dionaea-signals.$(OBJEXT) \
+	dionaea-incident.$(OBJEXT) dionaea-threads.$(OBJEXT) \
+	dionaea-bistream.$(OBJEXT) dionaea-hpfeeds.$(OBJEXT) dionaea-sha1.$(OBJEXT) dionaea-publish.$(OBJEXT) dionaea-processor.$(OBJEXT)
+dionaea_OBJECTS = $(am_dionaea_OBJECTS)
+dionaea_LDADD = $(LDADD)
+dionaea_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
+	--mode=link $(CCLD) $(dionaea_CFLAGS) $(CFLAGS) \
+	$(dionaea_LDFLAGS) $(LDFLAGS) -o $@
+DEFAULT_INCLUDES = -I. -I$(top_builddir)
+depcomp = $(SHELL) $(top_srcdir)/depcomp
+am__depfiles_maybe = depfiles
+am__mv = mv -f
+COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
+	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
+LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
+	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
+	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
+CCLD = $(CC)
+LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
+	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
+	$(LDFLAGS) -o $@
+SOURCES = $(dionaea_SOURCES)
+DIST_SOURCES = $(dionaea_SOURCES)
+ETAGS = etags
+CTAGS = ctags
+DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
+ACLOCAL = ${SHELL} /home/raspberrypi/dionaea/missing --run aclocal-1.11
+AMTAR = ${SHELL} /home/raspberrypi/dionaea/missing --run tar
+AR = ar
+AUTOCONF = ${SHELL} /home/raspberrypi/dionaea/missing --run autoconf
+AUTOHEADER = ${SHELL} /home/raspberrypi/dionaea/missing --run autoheader
+AUTOMAKE = ${SHELL} /home/raspberrypi/dionaea/missing --run automake-1.11
+AWK = gawk
+CC = gcc
+CCDEPMODE = depmode=gcc3
+CFLAGS =  -std=c99 -D_GNU_SOURCE -D_GNU_SOURCE -I/opt/dionaea/include -DEV_COMPAT3=0 -I/opt/dionaea/include/glib-2.0 -I/opt/dionaea/lib/glib-2.0/include   -pthread -I/opt/dionaea/include/glib-2.0 -I/opt/dionaea/lib/glib-2.0/include   -I/opt/dionaea/include/glib-2.0 -I/opt/dionaea/lib/glib-2.0/include   -I/opt/dionaea/include/ -Wall -Werror -Wstrict-prototypes -g -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
+CFLAGS_DEBUG = -g
+CFLAGS_DEFAULT = -Wall -Werror
+CPP = gcc -E
+CPPFLAGS = 
+CURL_CONFIG_BIN = /opt/dionaea/bin//curl-config
+CYGPATH_W = echo
+CYTHON_BIN = /usr/local/bin/cython
+DATADIR = /opt/dionaea/share
+DATAROOTDIR = /opt/dionaea/share
+DEFS = -DHAVE_CONFIG_H
+DEPDIR = .deps
+DSYMUTIL = 
+DUMPBIN = 
+ECHO_C = 
+ECHO_N = -n
+ECHO_T = 
+EGREP = /bin/grep -E
+EXEEXT = 
+FGREP = /bin/grep -F
+GREP = /bin/grep
+INSTALL = /usr/bin/install -c
+INSTALL_DATA = ${INSTALL} -m 644
+INSTALL_PROGRAM = ${INSTALL}
+INSTALL_SCRIPT = ${INSTALL}
+INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
+LD = /usr/bin/ld
+LDFLAGS = -Wl,-rpath,/opt/dionaea/lib
+LIBDIR = /opt/dionaea/lib
+LIBOBJS = 
+LIBS = 
+LIBTOOL = $(SHELL) $(top_builddir)/libtool
+LIB_CSPM_CFLAGS = 
+LIB_CSPM_LIBS = 
+LIB_CURL_CFLAGS = -I/opt/dionaea/include
+LIB_CURL_LIBS = -L/opt/dionaea/lib -lcurl -L/opt/dionaea/lib
+LIB_EMU_CFLAGS = -I/opt/dionaea/include/
+LIB_EMU_LIBS = -L/opt/dionaea/lib/ -lemu
+LIB_EV_CFLAGS = -I/opt/dionaea/include -DEV_COMPAT3=0
+LIB_EV_LIBS = -L/opt/dionaea/lib -lev
+LIB_GC_CFLAGS = 
+LIB_GC_LIBS = 
+LIB_GLIB_CFLAGS = -I/opt/dionaea/include/glib-2.0 -I/opt/dionaea/lib/glib-2.0/include   -pthread -I/opt/dionaea/include/glib-2.0 -I/opt/dionaea/lib/glib-2.0/include   -I/opt/dionaea/include/glib-2.0 -I/opt/dionaea/lib/glib-2.0/include  
+LIB_GLIB_LIBS = -L/opt/dionaea/lib -lglib-2.0   -pthread -L/opt/dionaea/lib -lgthread-2.0 -lrt -lglib-2.0   -Wl,--export-dynamic -L/opt/dionaea/lib -lgmodule-2.0 -lglib-2.0  
+LIB_LCFG_CFLAGS = -I/opt/dionaea/include/
+LIB_LCFG_LIBS = -L/opt/dionaea/lib/ -llcfg
+LIB_LOUDMOUTH_CFLAGS = 
+LIB_LOUDMOUTH_LIBS = 
+LIB_NETFILTER_QUEUE_CFLAGS = 
+LIB_NETFILTER_QUEUE_LIBS = 
+LIB_NL_CFLAGS = 
+LIB_NL_LIBS = 
+LIB_PCAP_CFLAGS = -I/opt/dionaea/include
+LIB_PCAP_LIBS = -L/opt/dionaea/lib/ -lpcap
+LIB_SSL_CFLAGS = 
+LIB_SSL_LIBS = -lssl
+LIB_UDNS_CFLAGS = -I/opt/dionaea/include/
+LIB_UDNS_LIBS = -L/opt/dionaea/lib/ -ludns
+LIB_XMATCH_CFLAGS = 
+LIB_XMATCH_LIBS = 
+LIPO = 
+LN_S = ln -s
+LOCALESTATEDIR = /opt/dionaea/var
+LTLIBOBJS = 
+MAKEINFO = ${SHELL} /home/raspberrypi/dionaea/missing --run makeinfo
+MKDIR_P = /bin/mkdir -p
+NM = /usr/bin/nm -B
+NMEDIT = 
+OBJDUMP = objdump
+OBJEXT = o
+OTOOL = 
+OTOOL64 = 
+PACKAGE = dionaea
+PACKAGE_BUGREPORT = nepenthesdev@gmail.com
+PACKAGE_NAME = dionaea
+PACKAGE_STRING = dionaea 0.1.0
+PACKAGE_TARNAME = dionaea
+PACKAGE_URL = 
+PACKAGE_VERSION = 0.1.0
+PATH_SEPARATOR = :
+PKG_CONFIG = /usr/bin/pkg-config
+PREFIX = /opt/dionaea
+PYTHON = /usr/local/bin/python3.2
+PYTHON_CSPEC =  -I/usr/local/include/python3.2m
+PYTHON_EXECPREFIX = 
+PYTHON_LSPEC = -Wl,-rpath,/opt/dionaea/lib -Xlinker -export-dynamic -lm -lpthread -ldl  -lutil -lpython3.2m
+PYTHON_PREFIX = 
+RANLIB = ranlib
+SED = /bin/sed
+SET_MAKE = 
+SHELL = /bin/bash
+STRIP = strip
+SYSCONFDIR = /opt/dionaea/etc
+VERSION = 0.1.0
+abs_builddir = /home/raspberrypi/dionaea/src
+abs_srcdir = /home/raspberrypi/dionaea/src
+abs_top_builddir = /home/raspberrypi/dionaea
+abs_top_srcdir = /home/raspberrypi/dionaea
+ac_ct_CC = gcc
+ac_ct_DUMPBIN = 
+am__include = include
+am__leading_dot = .
+am__quote = 
+am__tar = ${AMTAR} chof - "$$tardir"
+am__untar = ${AMTAR} xf -
+bindir = ${exec_prefix}/bin
+build = i686-pc-linux-gnu
+build_alias = 
+build_cpu = i686
+build_os = linux-gnu
+build_vendor = pc
+builddir = .
+datadir = ${datarootdir}
+datarootdir = ${prefix}/share
+docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
+dvidir = ${docdir}
+exec_prefix = ${prefix}
+glib_CFLAGS = -I/opt/dionaea/include/glib-2.0 -I/opt/dionaea/lib/glib-2.0/include  
+glib_LIBS = -L/opt/dionaea/lib -lglib-2.0  
+gmodule_CFLAGS = -I/opt/dionaea/include/glib-2.0 -I/opt/dionaea/lib/glib-2.0/include  
+gmodule_LIBS = -Wl,--export-dynamic -L/opt/dionaea/lib -lgmodule-2.0 -lglib-2.0  
+gthread_CFLAGS = -pthread -I/opt/dionaea/include/glib-2.0 -I/opt/dionaea/lib/glib-2.0/include  
+gthread_LIBS = -pthread -L/opt/dionaea/lib -lgthread-2.0 -lrt -lglib-2.0  
+host = i686-pc-linux-gnu
+host_alias = 
+host_cpu = i686
+host_os = linux-gnu
+host_vendor = pc
+htmldir = ${docdir}
+includedir = ${prefix}/include
+infodir = ${datarootdir}/info
+install_sh = ${SHELL} /home/raspberrypi/dionaea/install-sh
+libdir = ${exec_prefix}/lib
+libexecdir = ${exec_prefix}/libexec
+localedir = ${datarootdir}/locale
+localstatedir = ${prefix}/var
+loudmouth_CFLAGS = 
+loudmouth_LIBS = 
+lt_ECHO = echo
+mandir = ${datarootdir}/man
+mkdir_p = /bin/mkdir -p
+oldincludedir = /usr/include
+pdfdir = ${docdir}
+prefix = /opt/dionaea
+program_transform_name = s,x,x,
+psdir = ${docdir}
+sbindir = ${exec_prefix}/sbin
+sharedstatedir = ${prefix}/com
+srcdir = .
+sysconfdir = ${prefix}/etc
+target_alias = 
+top_build_prefix = ../
+top_builddir = ..
+top_srcdir = ..
+AUTOMAKE_OPTIONS = foreign
+AM_CFLAGS = -I../include -I .. -fno-strict-aliasing
+AM_LDFLAGS = 
+dionaea_CFLAGS = ${LIB_EV_CFLAGS} ${LIB_GLIB_CFLAGS} \
+	${LIB_LCFG_CFLAGS} ${LIB_SSL_CFLAGS} ${LIB_UDNS_CFLAGS} \
+	${LIB_GC_CFLAGS} ${AM_CFLAGS}
+dionaea_LDFLAGS = ${LIB_EV_LIBS} ${LIB_GLIB_LIBS} ${LIB_LCFG_LIBS} \
+	${LIB_SSL_LIBS} ${LIB_UDNS_LIBS} ${LIB_GC_LIBS} ${AM_LDFLAGS}
+dionaea_SOURCES = dionaea.c dns.c refcount.c node_info.c util.c \
+	connection.c modules.c pchild.c log.c signals.c incident.c \
+	threads.c bistream.c  hpfeeds.c sha1.c publish.c processor.c
+all: all-am
+
+.SUFFIXES:
+.SUFFIXES: .c .lo .o .obj
+$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
+	@for dep in $?; do \
+	  case '$(am__configure_deps)' in \
+	    *$$dep*) \
+	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
+	        && { if test -f $@; then exit 0; else break; fi; }; \
+	      exit 1;; \
+	  esac; \
+	done; \
+	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/Makefile'; \
+	$(am__cd) $(top_srcdir) && \
+	  $(AUTOMAKE) --foreign src/Makefile
+.PRECIOUS: Makefile
+Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
+	@case '$?' in \
+	  *config.status*) \
+	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
+	  *) \
+	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
+	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
+	esac;
+
+$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+
+$(top_srcdir)/configure:  $(am__configure_deps)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+$(am__aclocal_m4_deps):
+install-binPROGRAMS: $(bin_PROGRAMS)
+	@$(NORMAL_INSTALL)
+	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
+	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
+	for p in $$list; do echo "$$p $$p"; done | \
+	sed 's/$(EXEEXT)$$//' | \
+	while read p p1; do if test -f $$p || test -f $$p1; \
+	  then echo "$$p"; echo "$$p"; else :; fi; \
+	done | \
+	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
+	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
+	sed 'N;N;N;s,\n, ,g' | \
+	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
+	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
+	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
+	    else { print "f", $$3 "/" $$4, $$1; } } \
+	  END { for (d in files) print "f", d, files[d] }' | \
+	while read type dir files; do \
+	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
+	    test -z "$$files" || { \
+	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
+	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
+	    } \
+	; done
+
+uninstall-binPROGRAMS:
+	@$(NORMAL_UNINSTALL)
+	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
+	files=`for p in $$list; do echo "$$p"; done | \
+	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
+	      -e 's/$$/$(EXEEXT)/' `; \
+	test -n "$$list" || exit 0; \
+	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
+	cd "$(DESTDIR)$(bindir)" && rm -f $$files
+
+clean-binPROGRAMS:
+	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
+	echo " rm -f" $$list; \
+	rm -f $$list || exit $$?; \
+	test -n "$(EXEEXT)" || exit 0; \
+	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
+	echo " rm -f" $$list; \
+	rm -f $$list
+dionaea$(EXEEXT): $(dionaea_OBJECTS) $(dionaea_DEPENDENCIES) 
+	@rm -f dionaea$(EXEEXT)
+	$(dionaea_LINK) $(dionaea_OBJECTS) $(dionaea_LDADD) $(LIBS)
+
+mostlyclean-compile:
+	-rm -f *.$(OBJEXT)
+
+distclean-compile:
+	-rm -f *.tab.c
+
+include ./$(DEPDIR)/dionaea-bistream.Po
+include ./$(DEPDIR)/dionaea-connection.Po
+include ./$(DEPDIR)/dionaea-dionaea.Po
+include ./$(DEPDIR)/dionaea-dns.Po
+include ./$(DEPDIR)/dionaea-incident.Po
+include ./$(DEPDIR)/dionaea-log.Po
+include ./$(DEPDIR)/dionaea-modules.Po
+include ./$(DEPDIR)/dionaea-node_info.Po
+include ./$(DEPDIR)/dionaea-pchild.Po
+include ./$(DEPDIR)/dionaea-processor.Po
+include ./$(DEPDIR)/dionaea-refcount.Po
+include ./$(DEPDIR)/dionaea-signals.Po
+include ./$(DEPDIR)/dionaea-threads.Po
+include ./$(DEPDIR)/dionaea-util.Po
+.c.o:
+	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
+	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
+#	source='$<' object='$@' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(COMPILE) -c $<
+
+.c.obj:
+	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
+	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
+#	source='$<' object='$@' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(COMPILE) -c `$(CYGPATH_W) '$<'`
+
+.c.lo:
+	$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
+	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
+#	source='$<' object='$@' libtool=yes \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(LTCOMPILE) -c -o $@ $<
+
+dionaea-dionaea.o: dionaea.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-dionaea.o -MD -MP -MF $(DEPDIR)/dionaea-dionaea.Tpo -c -o dionaea-dionaea.o `test -f 'dionaea.c' || echo '$(srcdir)/'`dionaea.c
+	$(am__mv) $(DEPDIR)/dionaea-dionaea.Tpo $(DEPDIR)/dionaea-dionaea.Po
+#	source='dionaea.c' object='dionaea-dionaea.o' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-dionaea.o `test -f 'dionaea.c' || echo '$(srcdir)/'`dionaea.c
+
+dionaea-dionaea.obj: dionaea.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-dionaea.obj -MD -MP -MF $(DEPDIR)/dionaea-dionaea.Tpo -c -o dionaea-dionaea.obj `if test -f 'dionaea.c'; then $(CYGPATH_W) 'dionaea.c'; else $(CYGPATH_W) '$(srcdir)/dionaea.c'; fi`
+	$(am__mv) $(DEPDIR)/dionaea-dionaea.Tpo $(DEPDIR)/dionaea-dionaea.Po
+#	source='dionaea.c' object='dionaea-dionaea.obj' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-dionaea.obj `if test -f 'dionaea.c'; then $(CYGPATH_W) 'dionaea.c'; else $(CYGPATH_W) '$(srcdir)/dionaea.c'; fi`
+
+dionaea-dns.o: dns.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-dns.o -MD -MP -MF $(DEPDIR)/dionaea-dns.Tpo -c -o dionaea-dns.o `test -f 'dns.c' || echo '$(srcdir)/'`dns.c
+	$(am__mv) $(DEPDIR)/dionaea-dns.Tpo $(DEPDIR)/dionaea-dns.Po
+#	source='dns.c' object='dionaea-dns.o' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-dns.o `test -f 'dns.c' || echo '$(srcdir)/'`dns.c
+
+dionaea-dns.obj: dns.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-dns.obj -MD -MP -MF $(DEPDIR)/dionaea-dns.Tpo -c -o dionaea-dns.obj `if test -f 'dns.c'; then $(CYGPATH_W) 'dns.c'; else $(CYGPATH_W) '$(srcdir)/dns.c'; fi`
+	$(am__mv) $(DEPDIR)/dionaea-dns.Tpo $(DEPDIR)/dionaea-dns.Po
+#	source='dns.c' object='dionaea-dns.obj' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-dns.obj `if test -f 'dns.c'; then $(CYGPATH_W) 'dns.c'; else $(CYGPATH_W) '$(srcdir)/dns.c'; fi`
+
+dionaea-refcount.o: refcount.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-refcount.o -MD -MP -MF $(DEPDIR)/dionaea-refcount.Tpo -c -o dionaea-refcount.o `test -f 'refcount.c' || echo '$(srcdir)/'`refcount.c
+	$(am__mv) $(DEPDIR)/dionaea-refcount.Tpo $(DEPDIR)/dionaea-refcount.Po
+#	source='refcount.c' object='dionaea-refcount.o' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-refcount.o `test -f 'refcount.c' || echo '$(srcdir)/'`refcount.c
+
+dionaea-refcount.obj: refcount.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-refcount.obj -MD -MP -MF $(DEPDIR)/dionaea-refcount.Tpo -c -o dionaea-refcount.obj `if test -f 'refcount.c'; then $(CYGPATH_W) 'refcount.c'; else $(CYGPATH_W) '$(srcdir)/refcount.c'; fi`
+	$(am__mv) $(DEPDIR)/dionaea-refcount.Tpo $(DEPDIR)/dionaea-refcount.Po
+#	source='refcount.c' object='dionaea-refcount.obj' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-refcount.obj `if test -f 'refcount.c'; then $(CYGPATH_W) 'refcount.c'; else $(CYGPATH_W) '$(srcdir)/refcount.c'; fi`
+
+dionaea-node_info.o: node_info.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-node_info.o -MD -MP -MF $(DEPDIR)/dionaea-node_info.Tpo -c -o dionaea-node_info.o `test -f 'node_info.c' || echo '$(srcdir)/'`node_info.c
+	$(am__mv) $(DEPDIR)/dionaea-node_info.Tpo $(DEPDIR)/dionaea-node_info.Po
+#	source='node_info.c' object='dionaea-node_info.o' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-node_info.o `test -f 'node_info.c' || echo '$(srcdir)/'`node_info.c
+
+dionaea-node_info.obj: node_info.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-node_info.obj -MD -MP -MF $(DEPDIR)/dionaea-node_info.Tpo -c -o dionaea-node_info.obj `if test -f 'node_info.c'; then $(CYGPATH_W) 'node_info.c'; else $(CYGPATH_W) '$(srcdir)/node_info.c'; fi`
+	$(am__mv) $(DEPDIR)/dionaea-node_info.Tpo $(DEPDIR)/dionaea-node_info.Po
+#	source='node_info.c' object='dionaea-node_info.obj' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-node_info.obj `if test -f 'node_info.c'; then $(CYGPATH_W) 'node_info.c'; else $(CYGPATH_W) '$(srcdir)/node_info.c'; fi`
+
+dionaea-util.o: util.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-util.o -MD -MP -MF $(DEPDIR)/dionaea-util.Tpo -c -o dionaea-util.o `test -f 'util.c' || echo '$(srcdir)/'`util.c
+	$(am__mv) $(DEPDIR)/dionaea-util.Tpo $(DEPDIR)/dionaea-util.Po
+#	source='util.c' object='dionaea-util.o' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-util.o `test -f 'util.c' || echo '$(srcdir)/'`util.c
+
+dionaea-util.obj: util.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-util.obj -MD -MP -MF $(DEPDIR)/dionaea-util.Tpo -c -o dionaea-util.obj `if test -f 'util.c'; then $(CYGPATH_W) 'util.c'; else $(CYGPATH_W) '$(srcdir)/util.c'; fi`
+	$(am__mv) $(DEPDIR)/dionaea-util.Tpo $(DEPDIR)/dionaea-util.Po
+#	source='util.c' object='dionaea-util.obj' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-util.obj `if test -f 'util.c'; then $(CYGPATH_W) 'util.c'; else $(CYGPATH_W) '$(srcdir)/util.c'; fi`
+
+dionaea-connection.o: connection.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-connection.o -MD -MP -MF $(DEPDIR)/dionaea-connection.Tpo -c -o dionaea-connection.o `test -f 'connection.c' || echo '$(srcdir)/'`connection.c
+	$(am__mv) $(DEPDIR)/dionaea-connection.Tpo $(DEPDIR)/dionaea-connection.Po
+#	source='connection.c' object='dionaea-connection.o' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-connection.o `test -f 'connection.c' || echo '$(srcdir)/'`connection.c
+
+dionaea-connection.obj: connection.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-connection.obj -MD -MP -MF $(DEPDIR)/dionaea-connection.Tpo -c -o dionaea-connection.obj `if test -f 'connection.c'; then $(CYGPATH_W) 'connection.c'; else $(CYGPATH_W) '$(srcdir)/connection.c'; fi`
+	$(am__mv) $(DEPDIR)/dionaea-connection.Tpo $(DEPDIR)/dionaea-connection.Po
+#	source='connection.c' object='dionaea-connection.obj' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-connection.obj `if test -f 'connection.c'; then $(CYGPATH_W) 'connection.c'; else $(CYGPATH_W) '$(srcdir)/connection.c'; fi`
+
+dionaea-modules.o: modules.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-modules.o -MD -MP -MF $(DEPDIR)/dionaea-modules.Tpo -c -o dionaea-modules.o `test -f 'modules.c' || echo '$(srcdir)/'`modules.c
+	$(am__mv) $(DEPDIR)/dionaea-modules.Tpo $(DEPDIR)/dionaea-modules.Po
+#	source='modules.c' object='dionaea-modules.o' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-modules.o `test -f 'modules.c' || echo '$(srcdir)/'`modules.c
+
+dionaea-modules.obj: modules.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-modules.obj -MD -MP -MF $(DEPDIR)/dionaea-modules.Tpo -c -o dionaea-modules.obj `if test -f 'modules.c'; then $(CYGPATH_W) 'modules.c'; else $(CYGPATH_W) '$(srcdir)/modules.c'; fi`
+	$(am__mv) $(DEPDIR)/dionaea-modules.Tpo $(DEPDIR)/dionaea-modules.Po
+#	source='modules.c' object='dionaea-modules.obj' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-modules.obj `if test -f 'modules.c'; then $(CYGPATH_W) 'modules.c'; else $(CYGPATH_W) '$(srcdir)/modules.c'; fi`
+
+dionaea-pchild.o: pchild.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-pchild.o -MD -MP -MF $(DEPDIR)/dionaea-pchild.Tpo -c -o dionaea-pchild.o `test -f 'pchild.c' || echo '$(srcdir)/'`pchild.c
+	$(am__mv) $(DEPDIR)/dionaea-pchild.Tpo $(DEPDIR)/dionaea-pchild.Po
+#	source='pchild.c' object='dionaea-pchild.o' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-pchild.o `test -f 'pchild.c' || echo '$(srcdir)/'`pchild.c
+
+dionaea-pchild.obj: pchild.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-pchild.obj -MD -MP -MF $(DEPDIR)/dionaea-pchild.Tpo -c -o dionaea-pchild.obj `if test -f 'pchild.c'; then $(CYGPATH_W) 'pchild.c'; else $(CYGPATH_W) '$(srcdir)/pchild.c'; fi`
+	$(am__mv) $(DEPDIR)/dionaea-pchild.Tpo $(DEPDIR)/dionaea-pchild.Po
+#	source='pchild.c' object='dionaea-pchild.obj' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-pchild.obj `if test -f 'pchild.c'; then $(CYGPATH_W) 'pchild.c'; else $(CYGPATH_W) '$(srcdir)/pchild.c'; fi`
+
+dionaea-log.o: log.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-log.o -MD -MP -MF $(DEPDIR)/dionaea-log.Tpo -c -o dionaea-log.o `test -f 'log.c' || echo '$(srcdir)/'`log.c
+	$(am__mv) $(DEPDIR)/dionaea-log.Tpo $(DEPDIR)/dionaea-log.Po
+#	source='log.c' object='dionaea-log.o' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-log.o `test -f 'log.c' || echo '$(srcdir)/'`log.c
+
+dionaea-log.obj: log.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-log.obj -MD -MP -MF $(DEPDIR)/dionaea-log.Tpo -c -o dionaea-log.obj `if test -f 'log.c'; then $(CYGPATH_W) 'log.c'; else $(CYGPATH_W) '$(srcdir)/log.c'; fi`
+	$(am__mv) $(DEPDIR)/dionaea-log.Tpo $(DEPDIR)/dionaea-log.Po
+#	source='log.c' object='dionaea-log.obj' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-log.obj `if test -f 'log.c'; then $(CYGPATH_W) 'log.c'; else $(CYGPATH_W) '$(srcdir)/log.c'; fi`
+
+dionaea-signals.o: signals.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-signals.o -MD -MP -MF $(DEPDIR)/dionaea-signals.Tpo -c -o dionaea-signals.o `test -f 'signals.c' || echo '$(srcdir)/'`signals.c
+	$(am__mv) $(DEPDIR)/dionaea-signals.Tpo $(DEPDIR)/dionaea-signals.Po
+#	source='signals.c' object='dionaea-signals.o' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-signals.o `test -f 'signals.c' || echo '$(srcdir)/'`signals.c
+
+dionaea-signals.obj: signals.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-signals.obj -MD -MP -MF $(DEPDIR)/dionaea-signals.Tpo -c -o dionaea-signals.obj `if test -f 'signals.c'; then $(CYGPATH_W) 'signals.c'; else $(CYGPATH_W) '$(srcdir)/signals.c'; fi`
+	$(am__mv) $(DEPDIR)/dionaea-signals.Tpo $(DEPDIR)/dionaea-signals.Po
+#	source='signals.c' object='dionaea-signals.obj' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-signals.obj `if test -f 'signals.c'; then $(CYGPATH_W) 'signals.c'; else $(CYGPATH_W) '$(srcdir)/signals.c'; fi`
+
+dionaea-incident.o: incident.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-incident.o -MD -MP -MF $(DEPDIR)/dionaea-incident.Tpo -c -o dionaea-incident.o `test -f 'incident.c' || echo '$(srcdir)/'`incident.c
+	$(am__mv) $(DEPDIR)/dionaea-incident.Tpo $(DEPDIR)/dionaea-incident.Po
+#	source='incident.c' object='dionaea-incident.o' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-incident.o `test -f 'incident.c' || echo '$(srcdir)/'`incident.c
+
+dionaea-incident.obj: incident.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-incident.obj -MD -MP -MF $(DEPDIR)/dionaea-incident.Tpo -c -o dionaea-incident.obj `if test -f 'incident.c'; then $(CYGPATH_W) 'incident.c'; else $(CYGPATH_W) '$(srcdir)/incident.c'; fi`
+	$(am__mv) $(DEPDIR)/dionaea-incident.Tpo $(DEPDIR)/dionaea-incident.Po
+#	source='incident.c' object='dionaea-incident.obj' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-incident.obj `if test -f 'incident.c'; then $(CYGPATH_W) 'incident.c'; else $(CYGPATH_W) '$(srcdir)/incident.c'; fi`
+
+dionaea-threads.o: threads.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-threads.o -MD -MP -MF $(DEPDIR)/dionaea-threads.Tpo -c -o dionaea-threads.o `test -f 'threads.c' || echo '$(srcdir)/'`threads.c
+	$(am__mv) $(DEPDIR)/dionaea-threads.Tpo $(DEPDIR)/dionaea-threads.Po
+#	source='threads.c' object='dionaea-threads.o' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-threads.o `test -f 'threads.c' || echo '$(srcdir)/'`threads.c
+
+dionaea-threads.obj: threads.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-threads.obj -MD -MP -MF $(DEPDIR)/dionaea-threads.Tpo -c -o dionaea-threads.obj `if test -f 'threads.c'; then $(CYGPATH_W) 'threads.c'; else $(CYGPATH_W) '$(srcdir)/threads.c'; fi`
+	$(am__mv) $(DEPDIR)/dionaea-threads.Tpo $(DEPDIR)/dionaea-threads.Po
+#	source='threads.c' object='dionaea-threads.obj' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-threads.obj `if test -f 'threads.c'; then $(CYGPATH_W) 'threads.c'; else $(CYGPATH_W) '$(srcdir)/threads.c'; fi`
+
+dionaea-bistream.o: bistream.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-bistream.o -MD -MP -MF $(DEPDIR)/dionaea-bistream.Tpo -c -o dionaea-bistream.o `test -f 'bistream.c' || echo '$(srcdir)/'`bistream.c
+	$(am__mv) $(DEPDIR)/dionaea-bistream.Tpo $(DEPDIR)/dionaea-bistream.Po
+#	source='bistream.c' object='dionaea-bistream.o' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-bistream.o `test -f 'bistream.c' || echo '$(srcdir)/'`bistream.c
+
+dionaea-bistream.obj: bistream.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-bistream.obj -MD -MP -MF $(DEPDIR)/dionaea-bistream.Tpo -c -o dionaea-bistream.obj `if test -f 'bistream.c'; then $(CYGPATH_W) 'bistream.c'; else $(CYGPATH_W) '$(srcdir)/bistream.c'; fi`
+	$(am__mv) $(DEPDIR)/dionaea-bistream.Tpo $(DEPDIR)/dionaea-bistream.Po
+#	source='bistream.c' object='dionaea-bistream.obj' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-bistream.obj `if test -f 'bistream.c'; then $(CYGPATH_W) 'bistream.c'; else $(CYGPATH_W) '$(srcdir)/bistream.c'; fi`
+
+dionaea-processor.o: processor.c hpfeeds.c sha1.c publish.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-processor.o -MD -MP -MF $(DEPDIR)/dionaea-processor.Tpo -c -o dionaea-processor.o `test -f 'processor.c' || echo '$(srcdir)/'`processor.c
+	$(am__mv) $(DEPDIR)/dionaea-processor.Tpo $(DEPDIR)/dionaea-processor.Po
+#	source='processor.c' object='dionaea-processor.o' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-processor.o `test -f 'processor.c' || echo '$(srcdir)/'`processor.c
+
+dionaea-sha1.o:  sha1.c 
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-sha1.o -MD -MP -MF $(DEPDIR)/dionaea-sha1.Tpo -c -o dionaea-sha1.o `test -f 'sha1.c' || echo '$(srcdir)/'`sha1.c
+	$(am__mv) $(DEPDIR)/dionaea-sha1.Tpo $(DEPDIR)/dionaea-sha1.Po
+	
+dionaea-hpfeeds.o: hpfeeds.c  sha1.c 
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-hpfeeds.o -MD -MP -MF $(DEPDIR)/dionaea-hpfeeds.Tpo -c -o dionaea-hpfeeds.o `test -f 'hpfeeds.c' || echo '$(srcdir)/'`hpfeeds.c
+	$(am__mv) $(DEPDIR)/dionaea-hpfeeds.Tpo $(DEPDIR)/dionaea-hpfeeds.Po
+
+dionaea-publish.o: hpfeeds.c sha1.c publish.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-publish.o -MD -MP -MF $(DEPDIR)/dionaea-publish.Tpo -c -o dionaea-publish.o `test -f 'publish.c' || echo '$(srcdir)/'`publish.c
+	$(am__mv) $(DEPDIR)/dionaea-publish.Tpo $(DEPDIR)/dionaea-publish.Po
+
+dionaea-processor.obj: processor.c hpfeeds.c sha1.c publish.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -MT dionaea-processor.obj -MD -MP -MF $(DEPDIR)/dionaea-processor.Tpo -c -o dionaea-processor.obj `if test -f 'processor.c'; then $(CYGPATH_W) 'processor.c'; else $(CYGPATH_W) '$(srcdir)/processor.c'; fi`
+	$(am__mv) $(DEPDIR)/dionaea-processor.Tpo $(DEPDIR)/dionaea-processor.Po
+#	source='processor.c' object='dionaea-processor.obj' libtool=no \
+#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
+#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dionaea_CFLAGS) $(CFLAGS) -c -o dionaea-processor.obj `if test -f 'processor.c'; then $(CYGPATH_W) 'processor.c'; else $(CYGPATH_W) '$(srcdir)/processor.c'; fi`
+
+
+mostlyclean-libtool:
+	-rm -f *.lo
+
+clean-libtool:
+	-rm -rf .libs _libs
+
+ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
+	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
+	unique=`for i in $$list; do \
+	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
+	  done | \
+	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
+	      END { if (nonempty) { for (i in files) print i; }; }'`; \
+	mkid -fID $$unique
+tags: TAGS
+
+TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
+		$(TAGS_FILES) $(LISP)
+	set x; \
+	here=`pwd`; \
+	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
+	unique=`for i in $$list; do \
+	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
+	  done | \
+	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
+	      END { if (nonempty) { for (i in files) print i; }; }'`; \
+	shift; \
+	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
+	  test -n "$$unique" || unique=$$empty_fix; \
+	  if test $$# -gt 0; then \
+	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
+	      "$$@" $$unique; \
+	  else \
+	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
+	      $$unique; \
+	  fi; \
+	fi
+ctags: CTAGS
+CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
+		$(TAGS_FILES) $(LISP)
+	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
+	unique=`for i in $$list; do \
+	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
+	  done | \
+	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
+	      END { if (nonempty) { for (i in files) print i; }; }'`; \
+	test -z "$(CTAGS_ARGS)$$unique" \
+	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
+	     $$unique
+
+GTAGS:
+	here=`$(am__cd) $(top_builddir) && pwd` \
+	  && $(am__cd) $(top_srcdir) \
+	  && gtags -i $(GTAGS_ARGS) "$$here"
+
+distclean-tags:
+	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
+
+distdir: $(DISTFILES)
+	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	list='$(DISTFILES)'; \
+	  dist_files=`for file in $$list; do echo $$file; done | \
+	  sed -e "s|^$$srcdirstrip/||;t" \
+	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
+	case $$dist_files in \
+	  */*) $(MKDIR_P) `echo "$$dist_files" | \
+			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
+			   sort -u` ;; \
+	esac; \
+	for file in $$dist_files; do \
+	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
+	  if test -d $$d/$$file; then \
+	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
+	    if test -d "$(distdir)/$$file"; then \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
+	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
+	  else \
+	    test -f "$(distdir)/$$file" \
+	    || cp -p $$d/$$file "$(distdir)/$$file" \
+	    || exit 1; \
+	  fi; \
+	done
+check-am: all-am
+check: check-am
+all-am: Makefile $(PROGRAMS)
+installdirs:
+	for dir in "$(DESTDIR)$(bindir)"; do \
+	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
+	done
+install: install-am
+install-exec: install-exec-am
+install-data: install-data-am
+uninstall: uninstall-am
+
+install-am: all-am
+	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
+
+installcheck: installcheck-am
+install-strip:
+	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
+	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
+	  `test -z '$(STRIP)' || \
+	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
+mostlyclean-generic:
+
+clean-generic:
+
+distclean-generic:
+	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
+	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
+
+maintainer-clean-generic:
+	@echo "This command is intended for maintainers to use"
+	@echo "it deletes files that may require special tools to rebuild."
+clean: clean-am
+
+clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am
+
+distclean: distclean-am
+	-rm -rf ./$(DEPDIR)
+	-rm -f Makefile
+distclean-am: clean-am distclean-compile distclean-generic \
+	distclean-tags
+
+dvi: dvi-am
+
+dvi-am:
+
+html: html-am
+
+html-am:
+
+info: info-am
+
+info-am:
+
+install-data-am:
+
+install-dvi: install-dvi-am
+
+install-dvi-am:
+
+install-exec-am: install-binPROGRAMS
+
+install-html: install-html-am
+
+install-html-am:
+
+install-info: install-info-am
+
+install-info-am:
+
+install-man:
+
+install-pdf: install-pdf-am
+
+install-pdf-am:
+
+install-ps: install-ps-am
+
+install-ps-am:
+
+installcheck-am:
+
+maintainer-clean: maintainer-clean-am
+	-rm -rf ./$(DEPDIR)
+	-rm -f Makefile
+maintainer-clean-am: distclean-am maintainer-clean-generic
+
+mostlyclean: mostlyclean-am
+
+mostlyclean-am: mostlyclean-compile mostlyclean-generic \
+	mostlyclean-libtool
+
+pdf: pdf-am
+
+pdf-am:
+
+ps: ps-am
+
+ps-am:
+
+uninstall-am: uninstall-binPROGRAMS
+
+.MAKE: install-am install-strip
+
+.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
+	clean-generic clean-libtool ctags distclean distclean-compile \
+	distclean-generic distclean-libtool distclean-tags distdir dvi \
+	dvi-am html html-am info info-am install install-am \
+	install-binPROGRAMS install-data install-data-am install-dvi \
+	install-dvi-am install-exec install-exec-am install-html \
+	install-html-am install-info install-info-am install-man \
+	install-pdf install-pdf-am install-ps install-ps-am \
+	install-strip installcheck installcheck-am installdirs \
+	maintainer-clean maintainer-clean-generic mostlyclean \
+	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
+	pdf pdf-am ps ps-am tags uninstall uninstall-am \
+	uninstall-binPROGRAMS
+
+
+# Tell versions [3.59,3.63) of GNU make to not export all variables.
+# Otherwise a system limit (for SysV at least) may be exceeded.
+.NOEXPORT:
--- /dev/null
+++ b/hpfeeds/hpfeeds.py
@@ -0,0 +1,439 @@
+#********************************************************************************
+#*                               Dionaea
+#*                           - catches bugs -
+#*
+#*
+#*
+#* Copyright (C) 2010  Mark Schloesser
+#* 
+#* This program is free software; you can redistribute it and/or
+#* modify it under the terms of the GNU General Public License
+#* as published by the Free Software Foundation; either version 2
+#* of the License, or (at your option) any later version.
+#* 
+#* This program is distributed in the hope that it will be useful,
+#* but WITHOUT ANY WARRANTY; without even the implied warranty of
+#* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#* GNU General Public License for more details.
+#* 
+#* You should have received a copy of the GNU General Public License
+#* along with this program; if not, write to the Free Software
+#* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+#* 
+#* 
+#*             contact nepenthesdev@gmail.com  
+#*
+#*******************************************************************************/
+
+from dionaea.core import ihandler, incident, g_dionaea, connection
+from dionaea.util import sha512file
+
+import os
+import logging
+import struct
+import hashlib
+import json
+try: import pyev
+except: pyev = None
+
+logger = logging.getLogger('hpfeeds')
+logger.setLevel(logging.DEBUG)
+
+#def DEBUGPERF(msg):
+#	print(msg)
+#logger.debug = DEBUGPERF
+#logger.critical = DEBUGPERF
+
+BUFSIZ = 16384
+
+OP_ERROR        = 0
+OP_INFO         = 1
+OP_AUTH         = 2
+OP_PUBLISH      = 3
+OP_SUBSCRIBE    = 4
+
+MAXBUF = 1024**2
+SIZES = {
+	OP_ERROR: 5+MAXBUF,
+	OP_INFO: 5+256+20,
+	OP_AUTH: 5+256+20,
+	OP_PUBLISH: 5+MAXBUF,
+	OP_SUBSCRIBE: 5+256*2,
+}
+
+CONNCHAN = 'dionaea.connections'
+CAPTURECHAN = 'dionaea.capture'
+DCECHAN = 'dionaea.dcerpcrequests'
+SCPROFCHAN = 'dionaea.shellcodeprofiles'
+UNIQUECHAN = 'mwbinary.dionaea.sensorunique'
+
+OFFERCHAN = 'dionaea.offer'
+EMU_SERVICESCHAN = 'dionaea.emu_services'
+MSSQL_COMMANDSCHAN = 'dionaea.mssql_command'
+MSSQL_FINGERPRINTSCHAN = 'dionaea.mssql_fingerprint'
+LOGINSCHAN = 'dionaea.logins'
+DECRPCBINDCHAN = 'dionaea.dcerpcbind'
+P0FCHAN = 'dionaea.p0f'
+
+class BadClient(Exception):
+        pass
+
+# packs a string with 1 byte length field
+def strpack8(x):
+	if isinstance(x, str): x = x.encode('latin1')
+	return struct.pack('!B', len(x)%0xff) + x
+
+# unpacks a string with 1 byte length field
+def strunpack8(x):
+	l = x[0]
+	return x[1:1+l], x[1+l:]
+	
+def msghdr(op, data):
+	return struct.pack('!iB', 5+len(data), op) + data
+def msgpublish(ident, chan, data):
+	return msghdr(OP_PUBLISH, strpack8(ident) + strpack8(chan) + data)
+def msgsubscribe(ident, chan):
+	if isinstance(chan, str): chan = chan.encode('latin1')
+	return msghdr(OP_SUBSCRIBE, strpack8(ident) + chan)
+def msgauth(rand, ident, secret):
+	hash = hashlib.sha1(bytes(rand)+secret).digest()
+	return msghdr(OP_AUTH, strpack8(ident) + hash)
+
+class FeedUnpack(object):
+	def __init__(self):
+		self.buf = bytearray()
+	def __iter__(self):
+		return self
+	def __next__(self):
+		return self.unpack()
+	def feed(self, data):
+		self.buf.extend(data)
+	def unpack(self):
+		if len(self.buf) < 5:
+			raise StopIteration('No message.')
+
+		ml, opcode = struct.unpack('!iB', self.buf[:5])
+		if ml > SIZES.get(opcode, MAXBUF):
+			raise BadClient('Not respecting MAXBUF.')
+
+		if len(self.buf) < ml:
+			raise StopIteration('No message.')
+
+		data = self.buf[5:ml]
+		del self.buf[:ml]
+		return opcode, data
+
+class hpclient(connection):
+	def __init__(self, server, port, ident, secret):
+		logger.debug('hpclient init')
+		connection.__init__(self, 'tcp')
+		self.unpacker = FeedUnpack()
+		self.ident, self.secret = ident.encode('latin1'), secret.encode('latin1')
+
+		self.connect(server, port)
+		self.timeouts.reconnect = 10.0
+		self.sendfiles = []
+		self.msgqueue = []
+		self.filehandle = None
+		self.connected = False
+
+	def handle_established(self):
+		self.connected = True
+		logger.debug('hpclient established')
+
+	def handle_io_in(self, indata):
+		self.unpacker.feed(indata)
+
+		# if we are currently streaming a file, delay handling incoming messages
+		if self.filehandle:
+			return len(indata)
+
+		try:
+			for opcode, data in self.unpacker:
+				logger.debug('hpclient msg opcode {0} data {1}'.format(opcode, data))
+				if opcode == OP_INFO:
+					name, rand = strunpack8(data)
+					logger.debug('hpclient server name {0} rand {1}'.format(name, rand))
+					self.send(msgauth(rand, self.ident, self.secret))
+
+				elif opcode == OP_PUBLISH:
+					ident, data = strunpack8(data)
+					chan, data = strunpack8(data)
+					logger.debug('publish to {0} by {1}: {2}'.format(chan, ident, data))
+
+				elif opcode == OP_ERROR:
+					logger.debug('errormessage from server: {0}'.format(data))
+				else:
+					logger.debug('unknown opcode message: {0}'.format(opcode))
+		except BadClient:
+			logger.critical('unpacker error, disconnecting.')
+			self.close()
+
+		return len(indata)
+
+	def handle_io_out(self):
+		if self.filehandle: self.sendfiledata()
+		else:
+			if self.msgqueue:
+				m = self.msgqueue.pop(0)
+				self.send(m)
+
+	def publish(self, channel, **kwargs):
+		if self.filehandle: self.msgqueue.append(msgpublish(self.ident, channel, json.dumps(kwargs).encode('latin1')))
+		else: self.send(msgpublish(self.ident, channel, json.dumps(kwargs).encode('latin1')))
+
+	def sendfile(self, filepath):
+		# does not read complete binary into memory, read and send chunks
+		if not self.filehandle:
+			self.sendfileheader(filepath)
+			self.sendfiledata()
+		else: self.sendfiles.append(filepath)
+
+	def sendfileheader(self, filepath):
+		self.filehandle = open(filepath, 'rb')
+		fsize = os.stat(filepath).st_size
+		headc = strpack8(self.ident) + strpack8(UNIQUECHAN)
+		headh = struct.pack('!iB', 5+len(headc)+fsize, OP_PUBLISH)
+		self.send(headh + headc)
+
+	def sendfiledata(self):
+		tmp = self.filehandle.read(BUFSIZ)
+		if not tmp:
+			if self.sendfiles:
+				fp = self.sendfiles.pop(0)
+				self.sendfileheader(fp)
+			else:
+				self.filehandle = None
+				self.handle_io_in(b'')
+		else:
+			self.send(tmp)
+
+	def handle_timeout_idle(self):
+		pass
+
+	def handle_disconnect(self):
+		logger.info('hpclient disconnect')
+		self.connected = False
+		return 1
+
+	def handle_error(self, err):
+		logger.warn('hpclient error {0}'.format(err))
+		self.connected = False
+		return 1
+
+class hpfeedihandler(ihandler):
+	def __init__(self, config):
+		logger.debug('hpfeedhandler init')
+		self.client = hpclient(config['server'], int(config['port']), config['ident'], config['secret'])
+		ihandler.__init__(self, '*')
+
+		self.dynip_resolve = config.get('dynip_resolve', '')
+		self.dynip_timer = None
+		self.ownip = None
+		if self.dynip_resolve and 'http' in self.dynip_resolve:
+			if pyev == None:
+				logger.debug('You are missing the python pyev binding in your dionaea installation.')
+			else:
+				logger.debug('hpfeedihandler will use dynamic IP resolving!')
+				self.loop = pyev.default_loop()
+				self.dynip_timer = pyev.Timer(2., 300, self.loop, self._dynip_resolve)
+				self.dynip_timer.start()
+
+	def stop(self):
+		if self.dynip_timer:
+			self.dynip_timer.stop()
+			self.dynip_timer = None
+			self.loop = None
+
+	def _ownip(self, icd):
+		if self.dynip_resolve and 'http' in self.dynip_resolve and pyev != None:
+			if self.ownip: return self.ownip
+			else: raise Exception('Own IP not yet resolved!')
+		return icd.con.local.host
+
+	def __del__(self):
+		#self.client.close()
+		pass
+
+	def connection_publish(self, icd, con_type):
+		try:
+			con=icd.con
+			self.client.publish(CONNCHAN, connection_type=con_type, connection_transport=con.transport, connection_protocol=con.protocol, remote_host=con.remote.host, remote_port=con.remote.port, remote_hostname=con.remote.hostname, local_host=con.local.host, local_port=con.local.port)
+		except Exception as e:
+			logger.warn('exception when publishing: {0}'.format(e))
+
+	def handle_incident(self, i):
+		pass
+	
+	def handle_incident_dionaea_connection_tcp_listen(self, icd):
+		self.connection_publish(icd, 'listen')
+		con=icd.con
+		logger.info("listen connection on %s:%i" % 
+			(con.remote.host, con.remote.port))
+
+	def handle_incident_dionaea_connection_tls_listen(self, icd):
+		self.connection_publish(icd, 'listen')
+		con=icd.con
+		logger.info("listen connection on %s:%i" % 
+			(con.remote.host, con.remote.port))
+
+	def handle_incident_dionaea_connection_tcp_connect(self, icd):
+		self.connection_publish(icd, 'connect')
+		con=icd.con
+		logger.info("connect connection to %s/%s:%i from %s:%i" % 
+			(con.remote.host, con.remote.hostname, con.remote.port, con.local.host, con.local.port))
+
+	def handle_incident_dionaea_connection_tls_connect(self, icd):
+		self.connection_publish(icd, 'connect')
+		con=icd.con
+		logger.info("connect connection to %s/%s:%i from %s:%i" % 
+			(con.remote.host, con.remote.hostname, con.remote.port, con.local.host, con.local.port))
+
+	def handle_incident_dionaea_connection_udp_connect(self, icd):
+		self.connection_publish(icd, 'connect')
+		con=icd.con
+		logger.info("connect connection to %s/%s:%i from %s:%i" % 
+			(con.remote.host, con.remote.hostname, con.remote.port, con.local.host, con.local.port))
+
+	def handle_incident_dionaea_connection_tcp_accept(self, icd):
+		self.connection_publish(icd, 'accept')
+		con=icd.con
+		logger.info("accepted connection from  %s:%i to %s:%i" %
+			(con.remote.host, con.remote.port, con.local.host, con.local.port))
+
+	def handle_incident_dionaea_connection_tls_accept(self, icd):
+		self.connection_publish(icd, 'accept')
+		con=icd.con
+		logger.info("accepted connection from %s:%i to %s:%i" % 
+			(con.remote.host, con.remote.port, con.local.host, con.local.port))
+
+
+	def handle_incident_dionaea_connection_tcp_reject(self, icd):
+		self.connection_publish(icd, 'reject')
+		con=icd.con
+		logger.info("reject connection from %s:%i to %s:%i" % 
+			(con.remote.host, con.remote.port, con.local.host, con.local.port))
+
+	def handle_incident_dionaea_connection_tcp_pending(self, icd):
+		self.connection_publish(icd, 'pending')
+		con=icd.con
+		logger.info("pending connection from %s:%i to %s:%i" % 
+			(con.remote.host, con.remote.port, con.local.host, con.local.port))
+	
+	def handle_incident_dionaea_download_complete_unique(self, i):
+		self.handle_incident_dionaea_download_complete_again(i)
+		if not hasattr(i, 'con') or not self.client.connected: return
+		logger.debug('unique complete, publishing md5 {0}, path {1}'.format(i.md5hash, i.file))
+		try:
+			self.client.sendfile(i.file)
+		except Exception as e:
+			logger.warn('exception when publishing: {0}'.format(e))
+
+	def handle_incident_dionaea_download_complete_again(self, i):
+		if not hasattr(i, 'con') or not self.client.connected: return
+		logger.debug('hash complete, publishing md5 {0}, path {1}'.format(i.md5hash, i.file))
+		try:
+			sha512 = sha512file(i.file)
+			self.client.publish(CAPTURECHAN, remote_host=i.con.remote.host, 
+				remote_port=str(i.con.remote.port), local_host=self._ownip(i),
+				local_port=str(i.con.local.port), md5=i.md5hash, sha512=sha512,
+				url=i.url
+			)
+		except Exception as e:
+			logger.warn('exception when publishing: {0}'.format(e))
+
+	def handle_incident_dionaea_modules_python_smb_dcerpc_request(self, i):
+		if not hasattr(i, 'con') or not self.client.connected: return
+		logger.debug('dcerpc request, publishing uuid {0}, opnum {1}'.format(i.uuid, i.opnum))
+		try:
+			self.client.publish(DCECHAN, uuid=i.uuid, opnum=i.opnum,
+				remote_host=i.con.remote.host, remote_port=str(i.con.remote.port),
+				local_host=self._ownip(i), local_port=str(i.con.local.port),
+			)
+		except Exception as e:
+			logger.warn('exception when publishing: {0}'.format(e))
+
+	def handle_incident_dionaea_module_emu_profile(self, icd):
+		if not hasattr(icd, 'con') or not self.client.connected: return
+		logger.debug('emu profile, publishing length {0}'.format(len(icd.profile)))
+		try:
+			self.client.publish(SCPROFCHAN, profile=icd.profile)
+		except Exception as e:
+			logger.warn('exception when publishing: {0}'.format(e))
+
+	def _dynip_resolve(self, events, data):
+		i = incident("dionaea.upload.request")
+		i._url = self.dynip_resolve
+		i._callback = "dionaea.modules.python.hpfeeds.dynipresult"
+		i.report()
+
+	def handle_incident_dionaea_modules_python_hpfeeds_dynipresult(self, icd):
+		fh = open(icd.path, mode="rb")
+		self.ownip = fh.read().strip()
+		logger.debug('resolved own IP to: {0}'.format(self.ownip))
+		fh.close()
+
+	def handle_incident_dionaea_download_offer(self, icd):
+		if not hasattr(icd, 'con') or not self.client.connected: return
+		logger.debug('offer, publishing offer_url {0}'.format(str(icd.url)))
+		try:
+			self.client.publish(OFFERCHAN, offer_url=icd.url,remote_host=icd.con.remote.host, remote_port=str(icd.con.remote.port),
+				local_host=icd.con.local.host, local_port=str(icd.con.local.port),)
+		except Exception as e:
+			logger.warn('exception when publishing: {0}'.format(e))
+
+	def handle_incident_dionaea_service_shell_listen(self, icd):
+		if not hasattr(icd, 'con') or not self.client.connected: return
+		logger.debug('emu_services, publishing...')
+		try:
+			self.client.publish(EMU_SERVICECHAN, emu_service_url="bindshell://"+str(icd.port),remote_host=icd.con.remote.host, remote_port=str(icd.con.remote.port),
+				local_host=icd.con.local.host, local_port=str(icd.con.local.port),)
+		except Exception as e:
+			logger.warn('exception when publishing: {0}'.format(e))
+				
+	def handle_incident_dionaea_service_shell_connect(self, icd):
+		if not hasattr(icd, 'con') or not self.client.connected: return
+		logger.debug('emu_services, publishing...')
+		try:
+			self.client.publish(EMU_SERVICESCHAN, emu_service_url="connectbackshell://"+str(icd.host)+":"+str(icd.port),remote_host=icd.con.remote.host, remote_port=str(icd.con.remote.port),
+				local_host=icd.con.local.host, local_port=str(icd.con.local.port),)
+		except Exception as e:
+			logger.warn('exception when publishing: {0}'.format(e))
+
+	def handle_incident_dionaea_modules_python_p0f(self, icd):
+		if not hasattr(icd, 'con') or not self.client.connected: return
+		logger.debug('p0f, publishing...')
+		try:
+			self.client.publish(P0FCHAN, p0f_genre=icd.genre, p0f_link=icd.link, p0f_detail=icd.detail, p0f_uptime=icd.uptime, p0f_tos=icd.tos, p0f_dist=icd.dist, p0f_nat=icd.nat, p0f_fw=icd.fw,remote_host=icd.con.remote.host, remote_port=str(icd.con.remote.port),
+				local_host=icd.con.local.host, local_port=str(icd.con.local.port),)
+		except Exception as e:
+			logger.warn('exception when publishing: {0}'.format(e))
+
+	def handle_incident_dionaea_modules_python_smb_dcerpc_bind(self, icd):
+		if not hasattr(icd, 'con') or not self.client.connected: return
+		logger.debug('dcerpc_bind, publishing dcerpcbind_transfersyntax {0}'.format(icd.transfersyntax))
+		try:
+			self.client.publish(DECRPCBINDCHAN, dcerpcbind_uuid=icd.uuid, dcerpcbind_transfersyntax=icd.transfersyntax,remote_host=icd.con.remote.host, remote_port=str(icd.con.remote.port),
+				local_host=icd.con.local.host, local_port=str(icd.con.local.port),)
+		except Exception as e:
+			logger.warn('exception when publishing: {0}'.format(e))
+
+	def handle_incident_dionaea_modules_python_mssql_login(self, icd):
+		if not hasattr(icd, 'con') or not self.client.connected: return
+		logger.debug('mssql_login, publishing...')
+		try:
+			self.client.publish(LOGINSCHAN, login_username=icd.username, login_password=icd.password,remote_host=icd.con.remote.host, remote_port=str(icd.con.remote.port),
+				local_host=icd.con.local.host, local_port=str(icd.con.local.port),)
+			self.client.publish(MSSQL_FINGERPRINTSCHAN,mssql_fingerprint_hostname=icd.hostname, mssql_fingerprint_appname=icd.appname, mssql_fingerprint_cltintname=icd.cltintname,remote_host=icd.con.remote.host, remote_port=str(icd.con.remote.port),
+				local_host=icd.con.local.host, local_port=str(icd.con.local.port),)
+		except Exception as e:
+			logger.warn('exception when publishing: {0}'.format(e))
+
+	def handle_incident_dionaea_modules_python_mssql_cmd(self, icd):
+		if not hasattr(icd, 'con') or not self.client.connected: return
+		logger.debug('mssql_cmd, publishing...')
+		try:
+			self.client.publish(MSSQL_COMMANDSCHAN, mssql_command_statu=icd.status, mssql_command_cmd=icd.cmd,remote_host=icd.con.remote.host, remote_port=str(icd.con.remote.port),
+				local_host=icd.con.local.host, local_port=str(icd.con.local.port),)
+		except Exception as e:
+			logger.warn('exception when publishing: {0}'.format(e))	
--- /dev/null
+++ b/hpfeeds/hpfeeds.cfg.template
@@ -0,0 +1,6 @@
+#Notice:there is no space around  = 
+HOST=1.1.1.1
+PORT=10000
+IDENT=ident
+SECRET=secret
+CHANNEL=channel
--- a/modules/python/scripts/ihandlers.py
+++ b/modules/python/scripts/ihandlers.py
@@ -67,6 +67,13 @@
 	global g_handlers
 	g_handlers = []
 
+	if "hpfeeds" in g_dionaea.config()['modules']['python']['ihandlers']['handlers'] and 'hpfeeds' in g_dionaea.config()['modules']['python']:
+		import dionaea.hpfeeds
+		for client in g_dionaea.config()['modules']['python']['hpfeeds']:
+			conf = g_dionaea.config()['modules']['python']['hpfeeds'][client]
+			x = dionaea.hpfeeds.hpfeedihandler(conf)
+			g_handlers.append(x)
+
 	if "ftpdownload" in g_dionaea.config()['modules']['python']['ihandlers']['handlers']:
 		import dionaea.ftp
 		g_handlers.append(dionaea.ftp.ftpdownloadhandler('dionaea.download.offer'))
--- a/conf/dionaea.conf.dist
+++ b/conf/dionaea.conf.dist
@@ -1,28 +1,28 @@
 logging = {
 	default = {
-		// file not starting with / is taken relative to LOCALESTATEDIR (e.g. //var)
+		// file not starting with / is taken relative to LOCALESTATEDIR (e.g. /opt/dionaea/var)
 		file = "log/dionaea.log"
 		levels = "all"
 		domains = "*"
     }
 
 	errors = {
-		// file not starting with / is taken relative to LOCALESTATEDIR (e.g. //var)
+		// file not starting with / is taken relative to LOCALESTATEDIR (e.g. /opt/dionaea/var)
 		file = "log/dionaea-errors.log"
 		levels = "warning,error"
 		domains = "*"
 	}
 }
 
-processors =
-{
-	filter-emu =
+processors = 
+{ 
+	filter-emu = 
 	{
 		config = {
 			allow = [{ protocol = ["smbd","epmapper","nfqmirrord","mssqld"] }]
 		}
 		next = {
-			emu =
+			emu = 
 			{
 				config = {
 					emulation = {
@@ -38,9 +38,9 @@
 						}
 
 						/**
-						 * api default arguments for development
+						 * api default arguments for development 
 						 * disabled by default
-						 * not working yet
+						 * not working yet 
 						 */
 						api = {
 							connect = {
@@ -54,7 +54,7 @@
 		}
 	}
 
-	filter-streamdumper =
+	filter-streamdumper = 
 	{
 		config = {
 			allow = [
@@ -68,13 +68,13 @@
 		next = {
 			streamdumper = {
 				config = {
-					path = "/var/dionaea/bistreams/%Y-%m-%d/"
+					path = "var/dionaea/bistreams/%Y-%m-%d/"
 				}
 			}
 		}
 	}
 
-/*	filter-sessions =
+/*	filter-sessions = 
 	{
 		config = {
 			allow = [ { protocol = ["ftpctrl","remoteshell"] } ]
@@ -90,23 +90,23 @@
 
 downloads =
 {
-	dir = "/var/dionaea/binaries"
+	dir = "var/dionaea/binaries"
 	tmp-suffix = ".tmp"
 }
 
 bistreams =
 {
-	python =
+	python = 
 	{
-		dir = "/var/dionaea/bistreams"
+		dir = "var/dionaea/bistreams"
 	}
 }
 
-submit =
+submit = 
 {
 	defaults = {
 		urls = ["http://anubis.iseclab.org/nepenthes_action.php",
-				"http://onlineanalyzer.norman.com/nepenthes_upload.php",
+				"http://onlineanalyzer.norman.com/nepenthes_upload.php", 
 				"http://luigi.informatik.uni-mannheim.de/submit.php?action=verify"]
 		email = "nepenthesdev@gmail.com"
 		file_fieldname = "upfile"
@@ -135,7 +135,7 @@
 */
 
 /*
-	yoursection =
+	yoursection = 
 	{
 		urls = ["http://127.0.0.1/submit"]
 		email = "yourmail"
@@ -145,7 +145,7 @@
 */
 }
 
-listen =
+listen = 
 {
 	/* basically we have 3 modes
 	   - getifaddrs - auto
@@ -159,23 +159,17 @@
 		 will do the trick
 		 if you want to throw in ipv6 support as well ...
 		 addrs = { eth0 = ["::"] }
-		 note: ipv6 does not work with surfids yet,
+		 note: ipv6 does not work with surfids yet, 
 		 as ipv6 addresses are mapped to ipv4 and surfids fails to retrieve the sensor id for ::ffff:1.2.3.4
-	   - nl, will require a list of interfaces
-	     fnmatch is possible like
-		 interfaces = ["ppp*","tun*"]
-		 and loading the nl module AFTER the python module in the modules section below
-		 nl will use the kernel netlink interface to figure out which addresses exist
-		 at runtime, and start/stop services dynamically per address per interface
 	*/
-
+	     
 	mode = "getifaddrs"
 	addrs = { eth0 = ["::"] }
 }
 
 modules = {
 
-	curl =
+	curl = 
 	{
 		protocol = "http"
 	}
@@ -185,23 +179,23 @@
 		profile = "1"
 	}
 
-	pcap =
+	pcap = 
 	{
-		/**
-       	 * libpcap 1.0.0
-       	 *
-       	 * "Arithmetic expression against transport layer headers, like
-       	 * tcp[0], does not work  against  IPv6  packets. It  only looks
+		/** 
+       	 * libpcap 1.0.0 
+       	 *  
+       	 * "Arithmetic expression against transport layer headers, like 
+       	 * tcp[0], does not work  against  IPv6  packets. It  only looks 
        	 * at IPv4 packets."
-       	 *
-       	 * As a consequence, the default filter can not match
+       	 * 
+       	 * As a consequence, the default filter can not match 
        	 * ipv6 tcp rst packets.
-       	 *
+       	 * 
        	 * If you want to go for rejected ipv6, remove the tcp matching part of the filter
-       	 * The code is capable to checking the tcp-rst flag and seq number itself, but
+       	 * The code is capable to checking the tcp-rst flag and seq number itself, but 
        	 * matching every packet in userspace is expensive.
        	 * Therefore you'll have to hack the code if you want to track ipv6 rejected connections
-       	 *
+       	 * 
 		 * Format is IFACE = { addrs = MODE }
 		 * currently mode is ignored
        	 */
@@ -212,9 +206,9 @@
 	}
 
 	nfq =
-	{
-		/**
-		 * queue has to be the nfqueue num
+	{ 
+		/** 
+		 * queue has to be the nfqueue num 
 		 * refer to http://dionaea.carnivore.it/#nfq_python
 		 * if you do not specify a queue-num with iptables, 0 is the default
 		 */
@@ -233,13 +227,13 @@
 					"services",
 					"ihandlers"]
 		ftp = {
-			root = "/var/dionaea/wwwroot"
+			root = "var/dionaea/wwwroot"
 
 			/* ftp client section
 			 */
 
 			/* ports for active ftp
-			 * string indicating a range
+			 * string indicating a range 
 			 */
 			active-ports = "63001-64000"
 
@@ -250,10 +244,10 @@
 			active-host = "0.0.0.0"
 		}
 		tftp = {
-			root = "/var/dionaea/wwwroot"
+			root = "var/dionaea/wwwroot"
 		}
 		http = {
-			root = "/var/dionaea/wwwroot"
+			root = "var/dionaea/wwwroot"
 			max-request-size = "32768" // maximum size in kbytes of the request (32MB)
 		}
 		sip = {
@@ -266,7 +260,7 @@
 			tls = {
 				port = "5061"
 			}
-			users = "/var/dionaea/sipaccounts.sqlite"
+			users = "var/dionaea/sipaccounts.sqlite"
 			rtp = {
 				enable = "yes"
 				/* how to dump the rtp stream
@@ -275,7 +269,7 @@
 				mode = ["bistream", "pcap"]
 
 				pcap = {
-					path = "/var/dionaea/rtp/{personality}/%Y-%m-%d/"
+					path = "var/dionaea/rtp/{personality}/%Y-%m-%d/"
 					filename = "%H:%M:%S_{remote_host}_{remote_port}_in.pcap"
 				}
 			}
@@ -306,7 +300,7 @@
 				play-hello = {
 					do = "play"
 					params = {
-						file = "/var/dionaea/.../file.ext"
+						file = "var/dionaea/.../file.ext"
 					}
 				}
 			}
@@ -321,7 +315,7 @@
 		}
 		virustotal = {
 			apikey = "........." // grab it from your virustotal account at My account -> Inbox -> Public API
-			file = "/var/dionaea/vtcache.sqlite"
+			file = "var/dionaea/vtcache.sqlite"
 		}
 		mwserv = {			// ask your mwserv backend provider for needed values
 			url = "" 		// the url to send the submission requests to
@@ -353,7 +347,7 @@
 		logsql = {
 			mode = "sqlite" // so far there is only sqlite
 			sqlite = {
-				file = "/var/dionaea/logsql.sqlite"
+				file = "var/dionaea/logsql.sqlite"
 			}
 		}
 		logxmpp = {
@@ -365,7 +359,7 @@
 				server = "sensors.carnivore.it"
 
 				/**
-				 * as dionaea does not support starttls (xmpp on port 5223),
+				 * as dionaea does not support starttls (xmpp on port 5223), 
 				 * we rely on 'legacy ssl' for the xmpp connection (port 5222)
 				 */
 				port = "5223"
@@ -382,16 +376,16 @@
 				 * the default resource is a random string of 8 chars
 				 */
 				// resource = "theresource"
-				config =
+				config = 
 				{
 					/**
 					 * this defines a muc channel
 					 */
-					anon-events =
+					anon-events = 
 					{
 						/**
 						 * incidents matching these events will get relayed to the channel
-						 */
+						 */ 
 						events = ["^dionaea\x5c.connection\x5c..*",
 									"^dionaea\x5c.modules\x5c.python\x5c.smb.dcerpc\x5c.*",
 									"^dionaea\x5c.download\x5c.offer$",
@@ -409,18 +403,18 @@
 					}
 
 					anon-files =
-					{
+					{ 
 						events = ["^dionaea\x5c.download\x5c.complete\x5c.unique"]
 					}
 				}
 			}
 		}
 		nfq = {
-			/**
+			/** 
 			 * nfq can intercept incoming tcp connections during the tcp handshake
-			 * giving your honeypot the possibility to provide service on
+			 * giving your honeypot the possibility to provide service on  
 			 * ports which are not served by default.
-			 * refer to the documentation (http://dionaea.carnivore.it/#nfq_python)
+			 * refer to the documentation (http://dionaea.carnivore.it/#nfq_python) 
 			 * BEFORE using this
 			 */
 
@@ -446,19 +440,19 @@
 		}
 		p0f = {
 			/**
-			 * start p0f with
+			 * start p0f with 
 			 * sudo p0f -i any -u root -Q /tmp/p0f.sock -q -l
 			 */
 			path = "un:///tmp/p0f.sock"
 		}
 
 		fail2ban = {
-			downloads = "/var/dionaea/downloads.f2b"
-			offers = "/var/dionaea/offers.f2b"
+			downloads = "var/dionaea/downloads.f2b"
+			offers = "var/dionaea/offers.f2b"
 		}
 
 		ihandlers = {
-			handlers = ["ftpdownload", "tftpdownload", "emuprofile", "cmdshell", "store", "uniquedownload",
+			handlers = ["ftpdownload", "tftpdownload", "emuprofile", "cmdshell", "store", "uniquedownload", 
 			"logsql",
 //			"virustotal",
 //			"mwserv",
@@ -477,15 +471,8 @@
 
 	}
 
-	nl =
-	{
-		lookup_ethernet_addr = "no" // set to yes in case you are interested in the mac address  of the remote (only works for lan)
-
-	}
-
-
 	/* nc is a test module */
-/*	nc =
+/*	nc = 
 	{
 		services = [
 			{
@@ -539,7 +526,7 @@
 					listen = "15"
 					connect = "15"
 				}
-			},
+			},			
 			{
 				proto = "redir"
 				type = "tls"
@@ -653,7 +640,7 @@
 					connect = "15"
 					reconnect = "5"
 				}
-			},
+			}, 
 			{
 				proto = "source"
 				type = "tls"
